{"version":3,"file":"controls.js","names":["isReusableBlock","createBlock","parse","serialize","createRegistryControl","__","convertBlockToStatic","clientId","type","convertBlocksToReusable","clientIds","deleteReusableBlock","id","controls","CONVERT_BLOCK_TO_STATIC","registry","_ref","oldBlock","select","getBlock","reusableBlock","getEditedEntityRecord","attributes","ref","newBlocks","content","dispatch","replaceBlocks","CONVERT_BLOCKS_TO_REUSABLE","_ref2","title","getBlocksByClientId","status","updatedRecord","saveEntityRecord","newBlock","reusableBlocksStore","__experimentalSetEditingReusableBlock","DELETE_REUSABLE_BLOCK","_ref3","allBlocks","getBlocks","associatedBlocks","filter","block","associatedBlockClientIds","map","length","removeBlocks","deleteEntityRecord"],"sources":["../../../../src/components/with-registry-provider/reusable-store/controls.js"],"sourcesContent":["/**\n * WordPress dependencies\n */\nimport { isReusableBlock, createBlock, parse, serialize } from '@wordpress/blocks';\nimport { createRegistryControl } from '@wordpress/data';\nimport { __ } from '@wordpress/i18n';\n\n/**\n * Convert a reusable block to a static block effect handler\n *\n * @param {string}  clientId Block ID.\n * @return {Object} control descriptor.\n */\nexport function convertBlockToStatic( clientId ) {\n\treturn {\n\t\ttype: 'CONVERT_BLOCK_TO_STATIC',\n\t\tclientId,\n\t};\n}\n\n/**\n * Convert a static block to a reusable block effect handler\n *\n * @param {Array}  clientIds Block IDs.\n * @return {Object} control descriptor.\n */\nexport function convertBlocksToReusable( clientIds ) {\n\treturn {\n\t\ttype: 'CONVERT_BLOCKS_TO_REUSABLE',\n\t\tclientIds,\n\t};\n}\n\n/**\n * Deletes a reusable block.\n *\n * @param {string} id Reusable block ID.\n * @return {Object} control descriptor.\n */\nexport function deleteReusableBlock( id ) {\n\treturn {\n\t\ttype: 'DELETE_REUSABLE_BLOCK',\n\t\tid,\n\t};\n}\n\nconst controls = {\n\tCONVERT_BLOCK_TO_STATIC: createRegistryControl( ( registry ) => ( { clientId } ) => {\n\t\tconst oldBlock = registry.select( 'core/block-editor' ).getBlock( clientId );\n\t\tconst reusableBlock = registry\n\t\t\t.select( 'core' )\n\t\t\t.getEditedEntityRecord( 'postType', 'wp_block', oldBlock.attributes.ref );\n\n\t\tconst newBlocks = parse( reusableBlock.content );\n\t\tregistry.dispatch( 'core/block-editor' ).replaceBlocks( oldBlock.clientId, newBlocks );\n\t} ),\n\n\tCONVERT_BLOCKS_TO_REUSABLE: createRegistryControl(\n\t\t( registry ) =>\n\t\t\tasync function ( { clientIds } ) {\n\t\t\t\tconst reusableBlock = {\n\t\t\t\t\ttitle: __( 'Untitled Reusable Block' ),\n\t\t\t\t\tcontent: serialize( registry.select( 'core/block-editor' ).getBlocksByClientId( clientIds ) ),\n\t\t\t\t\tstatus: 'publish',\n\t\t\t\t};\n\n\t\t\t\tconst updatedRecord = await registry\n\t\t\t\t\t.dispatch( 'core' )\n\t\t\t\t\t.saveEntityRecord( 'postType', 'wp_block', reusableBlock );\n\n\t\t\t\tconst newBlock = createBlock( 'core/block', {\n\t\t\t\t\tref: updatedRecord.id,\n\t\t\t\t} );\n\t\t\t\tregistry.dispatch( 'core/block-editor' ).replaceBlocks( clientIds, newBlock );\n\t\t\t\tregistry\n\t\t\t\t\t// @ts-ignore */}\n\t\t\t\t\t.dispatch( reusableBlocksStore )\n\t\t\t\t\t.__experimentalSetEditingReusableBlock( newBlock.clientId, true );\n\t\t\t}\n\t),\n\n\tDELETE_REUSABLE_BLOCK: createRegistryControl(\n\t\t( registry ) =>\n\t\t\tasync function ( { id } ) {\n\t\t\t\tconst reusableBlock = registry.select( 'core' ).getEditedEntityRecord( 'postType', 'wp_block', id );\n\n\t\t\t\t// Don't allow a reusable block with a temporary ID to be deleted\n\t\t\t\tif ( ! reusableBlock ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Remove any other blocks that reference this reusable block\n\t\t\t\tconst allBlocks = registry.select( 'core/block-editor' ).getBlocks();\n\t\t\t\tconst associatedBlocks = allBlocks.filter(\n\t\t\t\t\t( block ) => isReusableBlock( block ) && block.attributes.ref === id\n\t\t\t\t);\n\t\t\t\tconst associatedBlockClientIds = associatedBlocks.map( ( block ) => block.clientId );\n\n\t\t\t\t// Remove the parsed block.\n\t\t\t\tif ( associatedBlockClientIds.length ) {\n\t\t\t\t\tregistry.dispatch( 'core/block-editor' ).removeBlocks( associatedBlockClientIds );\n\t\t\t\t}\n\n\t\t\t\tawait registry.dispatch( 'core' ).deleteEntityRecord( 'postType', 'wp_block', id );\n\t\t\t}\n\t),\n};\n\nexport default controls;\n"],"mappings":"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"}