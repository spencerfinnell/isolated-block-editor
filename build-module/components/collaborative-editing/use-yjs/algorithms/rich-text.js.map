{"version":3,"file":"rich-text.js","names":["diff","isEqual","select","create","toHTMLString","__UNSTABLE_LINE_SEPARATOR","OBJECT_REPLACEMENT_CHARACTER","gutenFormatsToYFormats","formats","findIndexOfEqualFormat","needle","haystack","arguments","length","undefined","findIndex","f","visited","Array","fill","map","yFormats","forEach","formatsForChar","charIdx","fIdx","fLength","ci","foundIndex","push","format","namedGutenFormatToStandardTags","index","formatTypeRecord","getFormatType","type","tagName","attributes","remappedEntries","Object","entries","_ref","key","value","fromEntries","getInferredMultilineTag","html","trimmedHtml","trim","test","prepareReplacementsForTransaction","a","b","partitionReplacementTypes","arr","multilineWrapperReplacements","normalReplacements","r","isArray","na","nb","replacementsDiff","simpleDiffArray","applyHTMLDelta","htmlA","htmlB","richTextMap","richTextOpts","multilineTagA","multilineTagB","inferredMultilineTag","inferredMultilineWrapperTags","mergedRichTextOpts","multilineTag","multilineWrapperTags","set","stringDiff","simpleDiffString","text","previousCharFormats","nullifierFormat","reduce","acc","_ref2","replacements","doc","transact","get","delete","remove","insert","yfa","yfb","formatsDiff","slice","keys","richTextMapToHTML","toString","stringAsMultiline","replacement","replacementHTML","replace","getMultilineWrapperTagHTMLReplacements","str","replacementsHTML","currentMultilineWrappers","foundLineSeparatorIndex","_replacements$foundLi","indexOf","multilineWrappers","d","reverse","multilineWrapper","isOpeningTag","wrapperTagReplacements","split","line","i","join"],"sources":["../../../../../src/components/collaborative-editing/use-yjs/algorithms/rich-text.js"],"sourcesContent":["/**\n * External dependencies\n */\nimport * as diff from 'lib0/diff';\nimport { isEqual } from 'lodash';\n\n/** @typedef {import(\"yjs\").XmlText} Y.XmlText */\n\n/**\n * WordPress dependencies\n */\nimport { select } from '@wordpress/data';\nimport { create, toHTMLString, __UNSTABLE_LINE_SEPARATOR } from '@wordpress/rich-text';\n\nconst OBJECT_REPLACEMENT_CHARACTER = '\\ufffc'; // defined in @wordpress/rich-text special-characters\n\n/**\n * Convert an array of Gutenberg RichText formats to an array of range-based Y.Text formats.\n *\n * @param {Object[]} formats\n * @return {Object[]} Y.Text formats\n */\nexport function gutenFormatsToYFormats( formats ) {\n\tconst findIndexOfEqualFormat = ( needle, haystack = [] ) => haystack.findIndex( ( f ) => needle === f );\n\tconst visited = Array( formats.length )\n\t\t.fill( null )\n\t\t.map( () => ( {} ) );\n\tconst yFormats = [];\n\n\tformats.forEach( ( formatsForChar, charIdx ) => {\n\t\tformatsForChar.forEach( ( f, fIdx ) => {\n\t\t\tif ( visited[ charIdx ][ fIdx ] ) return;\n\n\t\t\tlet fLength = 1;\n\n\t\t\tfor ( let ci = charIdx + 1; ci < formats.length; ci++ ) {\n\t\t\t\tconst foundIndex = findIndexOfEqualFormat( f, formats[ ci ] );\n\t\t\t\tif ( foundIndex === -1 ) break;\n\n\t\t\t\tvisited[ ci ][ foundIndex ] = true;\n\t\t\t\tfLength++;\n\t\t\t}\n\n\t\t\tyFormats.push( {\n\t\t\t\tformat: namedGutenFormatToStandardTags( f ),\n\t\t\t\tindex: charIdx,\n\t\t\t\tlength: fLength,\n\t\t\t} );\n\t\t} );\n\t} );\n\n\treturn yFormats;\n}\n\n/**\n * Converts registered formats back to their standard tag/attribute names.\n *\n * For example, `core/bold` will be converted back to `strong`.\n *\n * @param format\n */\nexport function namedGutenFormatToStandardTags( format ) {\n\t// @ts-ignore\n\tconst formatTypeRecord = select( 'core/rich-text' ).getFormatType( format.type );\n\tif ( ! formatTypeRecord ) return { [ format.type ]: true };\n\n\tconst { tagName, attributes = {} } = formatTypeRecord;\n\tif ( ! format.attributes ) return { [ tagName ]: true };\n\n\tconst remappedEntries = Object.entries( format.attributes ).map( ( [ key, value ] ) => [\n\t\tattributes[ key ],\n\t\tvalue,\n\t] );\n\treturn { [ tagName ]: Object.fromEntries( remappedEntries ) };\n}\n\n// TODO: Unsolved problem\n// This is an imperfect inferral, so ideally we want to get this information\n// from Gutenberg's internal representation of the RichText.\nfunction getInferredMultilineTag( html ) {\n\tconst trimmedHtml = html.trim();\n\tif ( /^<li>/.test( trimmedHtml ) ) return 'li';\n\tif ( /^<p>/.test( trimmedHtml ) ) return 'p';\n\treturn undefined;\n}\n\n/**\n * Massage the Gutenberg replacements into Yjs-friendly structures.\n *\n * @param {Array} a The `replacements` array of a Gutenberg RichText.\n * @param {Array} b The `replacements` array of another Gutenberg RichText.\n */\nfunction prepareReplacementsForTransaction( a, b ) {\n\tconst partitionReplacementTypes = ( arr ) => {\n\t\tconst multilineWrapperReplacements = {};\n\t\tconst normalReplacements = [];\n\n\t\tarr.forEach( ( r, index ) => {\n\t\t\tif ( Array.isArray( r ) ) {\n\t\t\t\t// If it's an array, it's a multiline wrapper tag (e.g. ul/ol) and not a normal replacement.\n\t\t\t\tmultilineWrapperReplacements[ index ] = r;\n\t\t\t} else if ( r ) {\n\t\t\t\t// Since normal replacements do not rely on an index-based mapping\n\t\t\t\t// with the full text, let's condense the sparse array.\n\t\t\t\tnormalReplacements.push( r );\n\t\t\t}\n\t\t} );\n\t\treturn { multilineWrapperReplacements, normalReplacements };\n\t};\n\n\tconst { normalReplacements: na } = partitionReplacementTypes( a );\n\tconst { multilineWrapperReplacements, normalReplacements: nb } = partitionReplacementTypes( b );\n\n\treturn { multilineWrapperReplacements, replacementsDiff: diff.simpleDiffArray( na, nb ) };\n}\n\n/**\n * Apply the delta between two HTML strings to a Y.XmlText.\n *\n * @param {string} htmlA\n * @param {string} htmlB\n * @param {import(\"yjs\").Map} richTextMap\n * @param {Object} [richTextOpts] Optional options object to pass @wordpress/rich-text create().\n */\nexport function applyHTMLDelta( htmlA, htmlB, richTextMap, richTextOpts = {} ) {\n\tconst [ multilineTagA, multilineTagB ] = [ htmlA, htmlB ].map( getInferredMultilineTag );\n\tconst inferredMultilineTag = multilineTagA || multilineTagB;\n\tconst inferredMultilineWrapperTags = inferredMultilineTag === 'li' ? [ 'ul', 'ol' ] : [];\n\tconst mergedRichTextOpts = {\n\t\t...( inferredMultilineTag ? { multilineTag: inferredMultilineTag } : {} ),\n\t\tmultilineWrapperTags: inferredMultilineWrapperTags,\n\t\t...richTextOpts,\n\t};\n\n\trichTextMap.set( 'multilineTag', inferredMultilineTag );\n\n\tconst a = create( { ...mergedRichTextOpts, html: htmlA } );\n\tconst b = create( { ...mergedRichTextOpts, html: htmlB } );\n\n\tconst stringDiff = diff.simpleDiffString( a.text, b.text );\n\n\t// By default, a Yjs string insertion will inherit the formats of the previous character.\n\t// We need to prevent this by inserting with an explicit format object nullifying the previous formats.\n\tconst previousCharFormats = b.formats[ stringDiff.index - 1 ];\n\tconst nullifierFormat = previousCharFormats?.reduce(\n\t\t( acc, { type } ) => ( {\n\t\t\t...acc,\n\t\t\t[ type ]: null,\n\t\t} ),\n\t\t{}\n\t);\n\n\tconst { multilineWrapperReplacements, replacementsDiff } = prepareReplacementsForTransaction(\n\t\ta.replacements,\n\t\tb.replacements\n\t);\n\n\trichTextMap.doc?.transact( () => {\n\t\trichTextMap.get( 'xmlText' ).delete( stringDiff.index, stringDiff.remove );\n\t\trichTextMap.get( 'xmlText' ).insert( stringDiff.index, stringDiff.insert, nullifierFormat );\n\n\t\tconst yfa = gutenFormatsToYFormats( a.formats );\n\t\tconst yfb = gutenFormatsToYFormats( b.formats );\n\t\tconst formatsDiff = diff.simpleDiffArray( yfa, yfb, isEqual );\n\n\t\tif ( formatsDiff.remove ) {\n\t\t\tyfa.slice( formatsDiff.index, formatsDiff.index + formatsDiff.remove ).forEach( ( f ) => {\n\t\t\t\tconst tagName = Object.keys( f.format )[ 0 ];\n\t\t\t\trichTextMap.get( 'xmlText' ).format( f.index, f.length, { [ tagName ]: null } );\n\t\t\t} );\n\t\t}\n\t\tif ( formatsDiff.insert ) {\n\t\t\tformatsDiff.insert.forEach( ( f ) => richTextMap.get( 'xmlText' ).format( f.index, f.length, f.format ) );\n\t\t}\n\n\t\trichTextMap.get( 'replacements' ).delete( replacementsDiff.index, replacementsDiff.remove );\n\t\trichTextMap.get( 'replacements' ).insert( replacementsDiff.index, replacementsDiff.insert );\n\t\trichTextMap.set( 'multilineWrapperReplacements', multilineWrapperReplacements );\n\t} );\n}\n\n/**\n * Convert the RichText back from our Yjs representation to an HTML string.\n *\n * @param {import(\"yjs\").Map} richTextMap\n * @return {string}\n */\nexport function richTextMapToHTML( richTextMap ) {\n\tlet text = richTextMap.get( 'xmlText' ).toString();\n\n\t// Process multiline tags\n\tconst multilineTag = richTextMap.get( 'multilineTag' );\n\ttext = multilineTag\n\t\t? stringAsMultiline( text, multilineTag, richTextMap.get( 'multilineWrapperReplacements' ) )\n\t\t: text;\n\n\t// Process replacements (e.g. inline images)\n\trichTextMap.get( 'replacements' ).forEach( ( replacement ) => {\n\t\tconst replacementHTML = toHTMLString( {\n\t\t\tvalue: {\n\t\t\t\treplacements: [ replacement ],\n\t\t\t\tformats: Array( 1 ),\n\t\t\t\ttext: OBJECT_REPLACEMENT_CHARACTER,\n\t\t\t},\n\t\t} );\n\t\ttext = text.replace( OBJECT_REPLACEMENT_CHARACTER, replacementHTML );\n\t} );\n\n\treturn text;\n}\n\n/**\n * Get HTML replacements for each multiline wrapper tag replacement.\n *\n * @param {string} str\n * @param {Record<number, {type: string}[]>} replacements\n */\nfunction getMultilineWrapperTagHTMLReplacements( str, replacements ) {\n\tconst replacementsHTML = [];\n\tlet currentMultilineWrappers = [];\n\tlet foundLineSeparatorIndex = -1;\n\n\tdo {\n\t\tfoundLineSeparatorIndex = str.indexOf( __UNSTABLE_LINE_SEPARATOR, foundLineSeparatorIndex + 1 );\n\t\tconst multilineWrappers = replacements[ foundLineSeparatorIndex ] ?? [];\n\t\tconst d = diff.simpleDiffArray( currentMultilineWrappers, multilineWrappers, isEqual );\n\t\tlet html = '';\n\n\t\t// Closing multiline wrapper tags\n\t\tcurrentMultilineWrappers\n\t\t\t.slice( d.index, d.index + d.remove )\n\t\t\t.reverse()\n\t\t\t.forEach( ( multilineWrapper ) => {\n\t\t\t\thtml += `</${ multilineWrapper.type }></li>`;\n\t\t\t} );\n\n\t\t// Opening multiline wrapper tags\n\t\td.insert.forEach( ( multilineWrapper ) => {\n\t\t\thtml += `<${ multilineWrapper.type }>`;\n\t\t} );\n\n\t\treplacementsHTML.push( { isOpeningTag: !! d.insert.length, html } );\n\t\tcurrentMultilineWrappers = multilineWrappers;\n\t} while ( foundLineSeparatorIndex !== -1 );\n\n\treturn replacementsHTML;\n}\n\n/**\n * Wraps each line of a multiline string with the given tags.\n *\n * @param {string} str A multiline string delimited by __UNSTABLE_LINE_SEPARATOR.\n * @param {string} multilineTag The tag name to wrap each line with.\n * @param {Record<number, {type: string}[]>} replacements Multiline wrapper replacements.\n * @return {string} The string reconstructed with multiline considerations.\n */\nfunction stringAsMultiline( str, multilineTag, replacements ) {\n\tconst wrapperTagReplacements = getMultilineWrapperTagHTMLReplacements( str, replacements );\n\n\treturn str\n\t\t.split( __UNSTABLE_LINE_SEPARATOR )\n\t\t.map( ( line, i ) => {\n\t\t\tconst { isOpeningTag, html } = wrapperTagReplacements[ i ];\n\n\t\t\treturn isOpeningTag\n\t\t\t\t? `<${ multilineTag }>${ line }${ html }`\n\t\t\t\t: `<${ multilineTag }>${ line }</${ multilineTag }>${ html }`;\n\t\t} )\n\t\t.join( '' );\n}\n"],"mappings":"AAAA;AACA;AACA;AACA,OAAO,KAAKA,IAAI,MAAM,WAAW;AACjC,SAASC,OAAO,QAAQ,QAAQ;;AAEhC;;AAEA;AACA;AACA;AACA,SAASC,MAAM,QAAQ,iBAAiB;AACxC,SAASC,MAAM,EAAEC,YAAY,EAAEC,yBAAyB,QAAQ,sBAAsB;AAEtF,MAAMC,4BAA4B,GAAG,QAAQ,CAAC,CAAC;;AAE/C;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,sBAAsBA,CAAEC,OAAO,EAAG;EACjD,MAAMC,sBAAsB,GAAG,SAAAA,CAAEC,MAAM;IAAA,IAAEC,QAAQ,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,EAAE;IAAA,OAAMD,QAAQ,CAACI,SAAS,CAAIC,CAAC,IAAMN,MAAM,KAAKM,CAAE,CAAC;EAAA;EACvG,MAAMC,OAAO,GAAGC,KAAK,CAAEV,OAAO,CAACK,MAAO,CAAC,CACrCM,IAAI,CAAE,IAAK,CAAC,CACZC,GAAG,CAAE,OAAQ,CAAC,CAAC,CAAG,CAAC;EACrB,MAAMC,QAAQ,GAAG,EAAE;EAEnBb,OAAO,CAACc,OAAO,CAAE,CAAEC,cAAc,EAAEC,OAAO,KAAM;IAC/CD,cAAc,CAACD,OAAO,CAAE,CAAEN,CAAC,EAAES,IAAI,KAAM;MACtC,IAAKR,OAAO,CAAEO,OAAO,CAAE,CAAEC,IAAI,CAAE,EAAG;MAElC,IAAIC,OAAO,GAAG,CAAC;MAEf,KAAM,IAAIC,EAAE,GAAGH,OAAO,GAAG,CAAC,EAAEG,EAAE,GAAGnB,OAAO,CAACK,MAAM,EAAEc,EAAE,EAAE,EAAG;QACvD,MAAMC,UAAU,GAAGnB,sBAAsB,CAAEO,CAAC,EAAER,OAAO,CAAEmB,EAAE,CAAG,CAAC;QAC7D,IAAKC,UAAU,KAAK,CAAC,CAAC,EAAG;QAEzBX,OAAO,CAAEU,EAAE,CAAE,CAAEC,UAAU,CAAE,GAAG,IAAI;QAClCF,OAAO,EAAE;MACV;MAEAL,QAAQ,CAACQ,IAAI,CAAE;QACdC,MAAM,EAAEC,8BAA8B,CAAEf,CAAE,CAAC;QAC3CgB,KAAK,EAAER,OAAO;QACdX,MAAM,EAAEa;MACT,CAAE,CAAC;IACJ,CAAE,CAAC;EACJ,CAAE,CAAC;EAEH,OAAOL,QAAQ;AAChB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASU,8BAA8BA,CAAED,MAAM,EAAG;EACxD;EACA,MAAMG,gBAAgB,GAAG/B,MAAM,CAAE,gBAAiB,CAAC,CAACgC,aAAa,CAAEJ,MAAM,CAACK,IAAK,CAAC;EAChF,IAAK,CAAEF,gBAAgB,EAAG,OAAO;IAAE,CAAEH,MAAM,CAACK,IAAI,GAAI;EAAK,CAAC;EAE1D,MAAM;IAAEC,OAAO;IAAEC,UAAU,GAAG,CAAC;EAAE,CAAC,GAAGJ,gBAAgB;EACrD,IAAK,CAAEH,MAAM,CAACO,UAAU,EAAG,OAAO;IAAE,CAAED,OAAO,GAAI;EAAK,CAAC;EAEvD,MAAME,eAAe,GAAGC,MAAM,CAACC,OAAO,CAAEV,MAAM,CAACO,UAAW,CAAC,CAACjB,GAAG,CAAEqB,IAAA;IAAA,IAAE,CAAEC,GAAG,EAAEC,KAAK,CAAE,GAAAF,IAAA;IAAA,OAAM,CACtFJ,UAAU,CAAEK,GAAG,CAAE,EACjBC,KAAK,CACL;EAAA,CAAC,CAAC;EACH,OAAO;IAAE,CAAEP,OAAO,GAAIG,MAAM,CAACK,WAAW,CAAEN,eAAgB;EAAE,CAAC;AAC9D;;AAEA;AACA;AACA;AACA,SAASO,uBAAuBA,CAAEC,IAAI,EAAG;EACxC,MAAMC,WAAW,GAAGD,IAAI,CAACE,IAAI,CAAC,CAAC;EAC/B,IAAK,OAAO,CAACC,IAAI,CAAEF,WAAY,CAAC,EAAG,OAAO,IAAI;EAC9C,IAAK,MAAM,CAACE,IAAI,CAAEF,WAAY,CAAC,EAAG,OAAO,GAAG;EAC5C,OAAOjC,SAAS;AACjB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASoC,iCAAiCA,CAAEC,CAAC,EAAEC,CAAC,EAAG;EAClD,MAAMC,yBAAyB,GAAKC,GAAG,IAAM;IAC5C,MAAMC,4BAA4B,GAAG,CAAC,CAAC;IACvC,MAAMC,kBAAkB,GAAG,EAAE;IAE7BF,GAAG,CAAChC,OAAO,CAAE,CAAEmC,CAAC,EAAEzB,KAAK,KAAM;MAC5B,IAAKd,KAAK,CAACwC,OAAO,CAAED,CAAE,CAAC,EAAG;QACzB;QACAF,4BAA4B,CAAEvB,KAAK,CAAE,GAAGyB,CAAC;MAC1C,CAAC,MAAM,IAAKA,CAAC,EAAG;QACf;QACA;QACAD,kBAAkB,CAAC3B,IAAI,CAAE4B,CAAE,CAAC;MAC7B;IACD,CAAE,CAAC;IACH,OAAO;MAAEF,4BAA4B;MAAEC;IAAmB,CAAC;EAC5D,CAAC;EAED,MAAM;IAAEA,kBAAkB,EAAEG;EAAG,CAAC,GAAGN,yBAAyB,CAAEF,CAAE,CAAC;EACjE,MAAM;IAAEI,4BAA4B;IAAEC,kBAAkB,EAAEI;EAAG,CAAC,GAAGP,yBAAyB,CAAED,CAAE,CAAC;EAE/F,OAAO;IAAEG,4BAA4B;IAAEM,gBAAgB,EAAE7D,IAAI,CAAC8D,eAAe,CAAEH,EAAE,EAAEC,EAAG;EAAE,CAAC;AAC1F;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASG,cAAcA,CAAEC,KAAK,EAAEC,KAAK,EAAEC,WAAW,EAAsB;EAAA,IAApBC,YAAY,GAAAvD,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;EAC3E,MAAM,CAAEwD,aAAa,EAAEC,aAAa,CAAE,GAAG,CAAEL,KAAK,EAAEC,KAAK,CAAE,CAAC7C,GAAG,CAAEyB,uBAAwB,CAAC;EACxF,MAAMyB,oBAAoB,GAAGF,aAAa,IAAIC,aAAa;EAC3D,MAAME,4BAA4B,GAAGD,oBAAoB,KAAK,IAAI,GAAG,CAAE,IAAI,EAAE,IAAI,CAAE,GAAG,EAAE;EACxF,MAAME,kBAAkB,GAAG;IAC1B,IAAKF,oBAAoB,GAAG;MAAEG,YAAY,EAAEH;IAAqB,CAAC,GAAG,CAAC,CAAC,CAAE;IACzEI,oBAAoB,EAAEH,4BAA4B;IAClD,GAAGJ;EACJ,CAAC;EAEDD,WAAW,CAACS,GAAG,CAAE,cAAc,EAAEL,oBAAqB,CAAC;EAEvD,MAAMnB,CAAC,GAAGhD,MAAM,CAAE;IAAE,GAAGqE,kBAAkB;IAAE1B,IAAI,EAAEkB;EAAM,CAAE,CAAC;EAC1D,MAAMZ,CAAC,GAAGjD,MAAM,CAAE;IAAE,GAAGqE,kBAAkB;IAAE1B,IAAI,EAAEmB;EAAM,CAAE,CAAC;EAE1D,MAAMW,UAAU,GAAG5E,IAAI,CAAC6E,gBAAgB,CAAE1B,CAAC,CAAC2B,IAAI,EAAE1B,CAAC,CAAC0B,IAAK,CAAC;;EAE1D;EACA;EACA,MAAMC,mBAAmB,GAAG3B,CAAC,CAAC5C,OAAO,CAAEoE,UAAU,CAAC5C,KAAK,GAAG,CAAC,CAAE;EAC7D,MAAMgD,eAAe,GAAGD,mBAAmB,EAAEE,MAAM,CAClD,CAAEC,GAAG,EAAAC,KAAA;IAAA,IAAE;MAAEhD;IAAK,CAAC,GAAAgD,KAAA;IAAA,OAAQ;MACtB,GAAGD,GAAG;MACN,CAAE/C,IAAI,GAAI;IACX,CAAC;EAAA,CAAE,EACH,CAAC,CACF,CAAC;EAED,MAAM;IAAEoB,4BAA4B;IAAEM;EAAiB,CAAC,GAAGX,iCAAiC,CAC3FC,CAAC,CAACiC,YAAY,EACdhC,CAAC,CAACgC,YACH,CAAC;EAEDlB,WAAW,CAACmB,GAAG,EAAEC,QAAQ,CAAE,MAAM;IAChCpB,WAAW,CAACqB,GAAG,CAAE,SAAU,CAAC,CAACC,MAAM,CAAEZ,UAAU,CAAC5C,KAAK,EAAE4C,UAAU,CAACa,MAAO,CAAC;IAC1EvB,WAAW,CAACqB,GAAG,CAAE,SAAU,CAAC,CAACG,MAAM,CAAEd,UAAU,CAAC5C,KAAK,EAAE4C,UAAU,CAACc,MAAM,EAAEV,eAAgB,CAAC;IAE3F,MAAMW,GAAG,GAAGpF,sBAAsB,CAAE4C,CAAC,CAAC3C,OAAQ,CAAC;IAC/C,MAAMoF,GAAG,GAAGrF,sBAAsB,CAAE6C,CAAC,CAAC5C,OAAQ,CAAC;IAC/C,MAAMqF,WAAW,GAAG7F,IAAI,CAAC8D,eAAe,CAAE6B,GAAG,EAAEC,GAAG,EAAE3F,OAAQ,CAAC;IAE7D,IAAK4F,WAAW,CAACJ,MAAM,EAAG;MACzBE,GAAG,CAACG,KAAK,CAAED,WAAW,CAAC7D,KAAK,EAAE6D,WAAW,CAAC7D,KAAK,GAAG6D,WAAW,CAACJ,MAAO,CAAC,CAACnE,OAAO,CAAIN,CAAC,IAAM;QACxF,MAAMoB,OAAO,GAAGG,MAAM,CAACwD,IAAI,CAAE/E,CAAC,CAACc,MAAO,CAAC,CAAE,CAAC,CAAE;QAC5CoC,WAAW,CAACqB,GAAG,CAAE,SAAU,CAAC,CAACzD,MAAM,CAAEd,CAAC,CAACgB,KAAK,EAAEhB,CAAC,CAACH,MAAM,EAAE;UAAE,CAAEuB,OAAO,GAAI;QAAK,CAAE,CAAC;MAChF,CAAE,CAAC;IACJ;IACA,IAAKyD,WAAW,CAACH,MAAM,EAAG;MACzBG,WAAW,CAACH,MAAM,CAACpE,OAAO,CAAIN,CAAC,IAAMkD,WAAW,CAACqB,GAAG,CAAE,SAAU,CAAC,CAACzD,MAAM,CAAEd,CAAC,CAACgB,KAAK,EAAEhB,CAAC,CAACH,MAAM,EAAEG,CAAC,CAACc,MAAO,CAAE,CAAC;IAC1G;IAEAoC,WAAW,CAACqB,GAAG,CAAE,cAAe,CAAC,CAACC,MAAM,CAAE3B,gBAAgB,CAAC7B,KAAK,EAAE6B,gBAAgB,CAAC4B,MAAO,CAAC;IAC3FvB,WAAW,CAACqB,GAAG,CAAE,cAAe,CAAC,CAACG,MAAM,CAAE7B,gBAAgB,CAAC7B,KAAK,EAAE6B,gBAAgB,CAAC6B,MAAO,CAAC;IAC3FxB,WAAW,CAACS,GAAG,CAAE,8BAA8B,EAAEpB,4BAA6B,CAAC;EAChF,CAAE,CAAC;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASyC,iBAAiBA,CAAE9B,WAAW,EAAG;EAChD,IAAIY,IAAI,GAAGZ,WAAW,CAACqB,GAAG,CAAE,SAAU,CAAC,CAACU,QAAQ,CAAC,CAAC;;EAElD;EACA,MAAMxB,YAAY,GAAGP,WAAW,CAACqB,GAAG,CAAE,cAAe,CAAC;EACtDT,IAAI,GAAGL,YAAY,GAChByB,iBAAiB,CAAEpB,IAAI,EAAEL,YAAY,EAAEP,WAAW,CAACqB,GAAG,CAAE,8BAA+B,CAAE,CAAC,GAC1FT,IAAI;;EAEP;EACAZ,WAAW,CAACqB,GAAG,CAAE,cAAe,CAAC,CAACjE,OAAO,CAAI6E,WAAW,IAAM;IAC7D,MAAMC,eAAe,GAAGhG,YAAY,CAAE;MACrCuC,KAAK,EAAE;QACNyC,YAAY,EAAE,CAAEe,WAAW,CAAE;QAC7B3F,OAAO,EAAEU,KAAK,CAAE,CAAE,CAAC;QACnB4D,IAAI,EAAExE;MACP;IACD,CAAE,CAAC;IACHwE,IAAI,GAAGA,IAAI,CAACuB,OAAO,CAAE/F,4BAA4B,EAAE8F,eAAgB,CAAC;EACrE,CAAE,CAAC;EAEH,OAAOtB,IAAI;AACZ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASwB,sCAAsCA,CAAEC,GAAG,EAAEnB,YAAY,EAAG;EACpE,MAAMoB,gBAAgB,GAAG,EAAE;EAC3B,IAAIC,wBAAwB,GAAG,EAAE;EACjC,IAAIC,uBAAuB,GAAG,CAAC,CAAC;EAEhC,GAAG;IAAA,IAAAC,qBAAA;IACFD,uBAAuB,GAAGH,GAAG,CAACK,OAAO,CAAEvG,yBAAyB,EAAEqG,uBAAuB,GAAG,CAAE,CAAC;IAC/F,MAAMG,iBAAiB,IAAAF,qBAAA,GAAGvB,YAAY,CAAEsB,uBAAuB,CAAE,cAAAC,qBAAA,cAAAA,qBAAA,GAAI,EAAE;IACvE,MAAMG,CAAC,GAAG9G,IAAI,CAAC8D,eAAe,CAAE2C,wBAAwB,EAAEI,iBAAiB,EAAE5G,OAAQ,CAAC;IACtF,IAAI6C,IAAI,GAAG,EAAE;;IAEb;IACA2D,wBAAwB,CACtBX,KAAK,CAAEgB,CAAC,CAAC9E,KAAK,EAAE8E,CAAC,CAAC9E,KAAK,GAAG8E,CAAC,CAACrB,MAAO,CAAC,CACpCsB,OAAO,CAAC,CAAC,CACTzF,OAAO,CAAI0F,gBAAgB,IAAM;MACjClE,IAAI,IAAK,KAAKkE,gBAAgB,CAAC7E,IAAM,QAAO;IAC7C,CAAE,CAAC;;IAEJ;IACA2E,CAAC,CAACpB,MAAM,CAACpE,OAAO,CAAI0F,gBAAgB,IAAM;MACzClE,IAAI,IAAK,IAAIkE,gBAAgB,CAAC7E,IAAM,GAAE;IACvC,CAAE,CAAC;IAEHqE,gBAAgB,CAAC3E,IAAI,CAAE;MAAEoF,YAAY,EAAE,CAAC,CAAEH,CAAC,CAACpB,MAAM,CAAC7E,MAAM;MAAEiC;IAAK,CAAE,CAAC;IACnE2D,wBAAwB,GAAGI,iBAAiB;EAC7C,CAAC,QAASH,uBAAuB,KAAK,CAAC,CAAC;EAExC,OAAOF,gBAAgB;AACxB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASN,iBAAiBA,CAAEK,GAAG,EAAE9B,YAAY,EAAEW,YAAY,EAAG;EAC7D,MAAM8B,sBAAsB,GAAGZ,sCAAsC,CAAEC,GAAG,EAAEnB,YAAa,CAAC;EAE1F,OAAOmB,GAAG,CACRY,KAAK,CAAE9G,yBAA0B,CAAC,CAClCe,GAAG,CAAE,CAAEgG,IAAI,EAAEC,CAAC,KAAM;IACpB,MAAM;MAAEJ,YAAY;MAAEnE;IAAK,CAAC,GAAGoE,sBAAsB,CAAEG,CAAC,CAAE;IAE1D,OAAOJ,YAAY,GACf,IAAIxC,YAAc,IAAI2C,IAAM,GAAGtE,IAAM,EAAC,GACtC,IAAI2B,YAAc,IAAI2C,IAAM,KAAK3C,YAAc,IAAI3B,IAAM,EAAC;EAC/D,CAAE,CAAC,CACFwE,IAAI,CAAE,EAAG,CAAC;AACb"}